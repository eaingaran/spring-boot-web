{"name":"Spring-boot-web","tagline":"A project which contains a simple Spring boot example for Web applications","body":"# Welcome to Jemos Spring Boot Web sample app\r\nThe goal os this project is to provide a simple and easy template for a Spring MVC application using Spring Boot. \r\nWhat are the advantages of using Spring Boot? \r\n\r\n* Zero XML configuration for your Spring MVC App\r\n* Easy Maven setup in a **jar** project which runs your Web application\r\n* Full support for unit and integration testing of your webapp without the need to start and stop containers\r\n\r\nFor years developers have struggled to get an easy way to setup and test a Spring MVC application. Typically one had to:\r\n\r\n* Setup a quite convoluted pom.xml with all necessary Spring dependencies\r\n* Setup web.xml to register the Spring Dispatcher Servlet\r\n* Setup Spring application context files, controller setup files, mappings, annotations, etc\r\n* Come up with all sorts of boilerplate code to just be able to simulate a web request to a web controller with a proper request and response\r\n\r\nAlthough eventually this would work, it would require a lot of effort, especially on the testing front. I'm sure you've been there, googling ways to test a controller in an integration test with a proper request and response. \r\n\r\nNow, imagine that your Spring MVC is contained in a Maven jar project, that your controller is a simple Java class with few annotations and that you can exercise it through a fully flagged servlet container like Tomcat or Jetty without having to start anything before your test or shutdown anything after the test has completed.\r\n\r\nThis represents the holy-grail of web applications speed of development and testing consistency.  \r\n\r\n## Maven setup - it's that easy\r\n\r\nFirst we define the parent project to be spring-boot-starter-parent. This project defines many required dependencies and boilerplate configuration so that we don't have to do the hard work. \r\n\r\n```\r\n<groupId>uk.co.jemos.experiments.multimodule</groupId>\r\n  <artifactId>spring-boot-web</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <packaging>jar</packaging>\r\n  <name>spring-boot-web</name>\r\n\r\n  <parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>1.2.3.RELEASE</version>\r\n  </parent>\r\n\r\n  <url>http://mtedone.github.io/spring-boot-web/</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <spring.boot.version>1.2.3.RELEASE</spring.boot.version>\r\n  </properties>\r\n```\r\n\r\nWe then define the Spring Boot maven plugin and (in my case), Java 8 compiler:\r\n\r\n```\r\n<plugin>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-maven-plugin</artifactId>\r\n      </plugin>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-compiler-plugin</artifactId>\r\n        <version>3.3</version>\r\n        <configuration>\r\n          <source>1.8</source>\r\n          <target>1.8</target>\r\n        </configuration>\r\n      </plugin>\r\n```\r\n\r\nFor testing, I took the following approach: \r\n\r\n* I want all unit tests to run by default when executing mvn goals from the command line\r\n* I want all integration tests to run only when specifying a particular Maven profile. This is useful for Continuous Integration environments (e.g. Jenkins) where one might want to run unit tests at each commit and integration tests maybe nightly or a bit less frequently. \r\n\r\nFor unit tests to execute I define the Maven surefire plugin:\r\n\r\n```\r\n<plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-surefire-plugin</artifactId>\r\n            <version>2.18.1</version>\r\n            <configuration>\r\n                <skip>false</skip>\r\n            </configuration>\r\n            <executions>\r\n                <execution>\r\n                    <id>surefire-it</id>\r\n                    <phase>test</phase>\r\n                    <goals>\r\n                        <goal>test</goal>\r\n                    </goals>\r\n                    <configuration>\r\n                        <skip>false</skip>\r\n                    </configuration>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n```\r\n\r\nFor integration tests I specify a dedicated profiles which excludes the unit tests executing only the integration tests through the Maven failsafe plugin. I have also to exclude the execution of unit tests and I achieve this through the Maven surefire plugin configuration specifically stating that I don't want any unit tests to run while executing integration tests.\r\n\r\n```\r\n<profiles>\r\n    <profile>\r\n      <id>integration-tests</id>\r\n      <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <configuration>\r\n                    <skip>true</skip>\r\n                </configuration>\r\n                <executions>\r\n                    <execution>\r\n                        <id>surefire-it</id>\r\n                        <phase>integration-test</phase>\r\n                        <goals>\r\n                            <goal>test</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <skip>true</skip>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n          <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-failsafe-plugin</artifactId>\r\n            <version>2.18.1</version>\r\n            <executions>\r\n              <execution>\r\n                <goals>\r\n                  <goal>integration-test</goal>\r\n                  <goal>verify</goal>\r\n                </goals>\r\n              </execution>\r\n            </executions>\r\n          </plugin>\r\n        </plugins>\r\n      </build>\r\n    </profile>\r\n  </profiles>\r\n```\r\n\r\nTo execute unit tests I can simply type: \r\n\r\n```\r\nmvn clean test\r\n```\r\n\r\nOr \r\n\r\n```\r\nmvn clean install\r\n```\r\n\r\nTo execute integration tests I can simply type: \r\n\r\n```\r\nmvn clean verify -Pintegration-tests\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}