{"name":"Spring-boot-web","tagline":"A project which contains a simple Spring boot example for Web applications","body":"# Welcome to Jemos Spring Boot Web sample app\r\nThe goal os this project is to provide a simple and easy template for a Spring MVC application using Spring Boot. \r\nWhat are the advantages of using Spring Boot? \r\n\r\n* Zero XML configuration for your Spring MVC App\r\n* Easy Maven setup in a **jar** project which runs your Web application\r\n* Full support for unit and integration testing of your webapp without the need to start and stop containers\r\n\r\nFor years developers have struggled to get an easy way to setup and test a Spring MVC application. Typically one had to:\r\n\r\n* Setup a quite convoluted pom.xml with all necessary Spring dependencies\r\n* Setup web.xml to register the Spring Dispatcher Servlet\r\n* Setup Spring application context files, controller setup files, mappings, annotations, etc\r\n* Come up with all sorts of boilerplate code to just be able to simulate a web request to a web controller with a proper request and response\r\n\r\nAlthough eventually this would work, it would require a lot of effort, especially on the testing front. I'm sure you've been there, googling ways to test a controller in an integration test with a proper request and response. \r\n\r\nNow, imagine that your Spring MVC is contained in a Maven jar project, that your controller is a simple Java class with few annotations and that you can exercise it through a fully flagged servlet container like Tomcat or Jetty without having to start anything before your test or shutdown anything after the test has completed.\r\n\r\nThis represents the holy-grail of web applications speed of development and testing consistency.  \r\n\r\n## Logging setup\r\n\r\nThe default Spring boot suite uses Logback by default. However, in a typical enterprise application users might want to use their own logging framework. One that I find very useful is Log4j2. Previous to version 2, Log4j had some limitations (e.g. the API and the implementation framework were tightly bound, no functionality to define placeholders in logging messages, etc.), therefore I've seen many users resorting to Slf4j. Log4j2 solves previous problems and provides the main benefits of Slf4j, therefore I'd suggest it as the logging framework of choice. \r\n\r\nSetting up the logging framework with Spring boot might be quite challenging. In practical terms one has to tell Maven that they want to use the Log4j2 capabilities of Sprint boot, renouncing to the default Logback. This is how it's done: \r\n\r\n* Define the Log4j2 configuration, by creating the log4j2.xml file:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"INFO\">\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\r\n        </Console>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"error\">\r\n            <AppenderRef ref=\"Console\"/>\r\n        </Root>\r\n        <Logger name=\"uk.co.jemos\" level=\"info\" additivity=\"false\">\r\n            <AppenderRef ref=\"Console\"/>\r\n        </Logger>\r\n        <Logger name=\"org.springframework.boot\" level=\"info\" additivity=\"false\">\r\n            <AppenderRef ref=\"Console\"/>\r\n        </Logger>\r\n    </Loggers>\r\n</Configuration>\r\n```\r\n\r\nIn the configuration above, I've instructed Log4j2 that I want Spring boot as well as my application's logging level set to INFO. One can fine tune the Log4j2 configuration as needed. For details, please refer to Log4j2 documentation. \r\n\r\n* Instruct Maven that we want Log4j2 logging capabilities for Spring boot but also for our application. \r\n\r\n```\r\n<dependency>\r\n          <groupId>org.springframework.boot</groupId>\r\n          <artifactId>spring-boot-starter</artifactId>\r\n          <exclusions>\r\n              <exclusion>\r\n                  <groupId>org.springframework.boot</groupId>\r\n                  <artifactId>spring-boot-starter-logging</artifactId>\r\n              </exclusion>\r\n          </exclusions>\r\n      </dependency>\r\n    <dependency>\r\n          <groupId>org.springframework.boot</groupId>\r\n          <artifactId>spring-boot-starter-log4j2</artifactId>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.apache.logging.log4j</groupId>\r\n          <artifactId>log4j-1.2-api</artifactId>\r\n          <version>2.2</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.apache.logging.log4j</groupId>\r\n          <artifactId>log4j-web</artifactId>\r\n          <version>2.2</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>commons-logging</groupId>\r\n          <artifactId>commons-logging</artifactId>\r\n          <version>1.2</version>\r\n      </dependency>\r\n      <dependency>\r\n          <groupId>org.codehaus.jackson</groupId>\r\n          <artifactId>jackson-mapper-asl</artifactId>\r\n          <version>1.9.13</version>\r\n      </dependency>\r\n```\r\n\r\nThe snippet above instructs Spring boot that we don't want the default Logback framework. Additionally, we have to include the commons-logging API as well as Log4j2 Spring boot logging support. The addition of standalone log4j2 dependencies is required in this project because I'm running also plain Java classes (i.e. non Spring boot), therefore I must provide the required dependencies.\r\n\r\n## Maven setup - it's that easy\r\n\r\nFirst we define the parent project to be spring-boot-starter-parent. This project defines many required dependencies and boilerplate configuration so that we don't have to do the hard work. \r\n\r\n```\r\n<groupId>uk.co.jemos.experiments.multimodule</groupId>\r\n  <artifactId>spring-boot-web</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <packaging>jar</packaging>\r\n  <name>spring-boot-web</name>\r\n\r\n  <parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>1.2.3.RELEASE</version>\r\n  </parent>\r\n\r\n  <url>http://mtedone.github.io/spring-boot-web/</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <spring.boot.version>1.2.3.RELEASE</spring.boot.version>\r\n  </properties>\r\n```\r\n\r\nWe then define the Spring Boot maven plugin and (in my case), Java 8 compiler:\r\n\r\n```\r\n <!-- Uncomment if you have uncommented the main method in Example.java\r\n      <plugin>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-maven-plugin</artifactId>\r\n      </plugin>\r\n      -->\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-compiler-plugin</artifactId>\r\n        <version>3.3</version>\r\n        <configuration>\r\n          <source>1.8</source>\r\n          <target>1.8</target>\r\n        </configuration>\r\n      </plugin>\r\n```\r\n\r\n### Approach to unit and integration testing\r\n\r\nFor testing, I took the following approach: \r\n\r\n* I want all unit tests to run by default when executing mvn goals from the command line\r\n* I want all integration tests to run only when specifying a particular Maven profile. This is useful for Continuous Integration environments (e.g. Jenkins) where one might want to run unit tests at each commit and integration tests maybe nightly or a bit less frequently. \r\n\r\nFor unit tests to execute I define the Maven surefire plugin:\r\n\r\n```\r\n<plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-surefire-plugin</artifactId>\r\n            <version>2.18.1</version>\r\n            <configuration>\r\n                <skip>false</skip>\r\n            </configuration>\r\n            <executions>\r\n                <execution>\r\n                    <id>surefire-it</id>\r\n                    <phase>test</phase>\r\n                    <goals>\r\n                        <goal>test</goal>\r\n                    </goals>\r\n                    <configuration>\r\n                        <skip>false</skip>\r\n                    </configuration>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n```\r\n\r\nFor integration tests I specify a dedicated profiles which excludes the unit tests executing only the integration tests through the Maven failsafe plugin. I have also to exclude the execution of unit tests and I achieve this through the Maven surefire plugin configuration specifically stating that I don't want any unit tests to run while executing integration tests.\r\n\r\n```\r\n<profiles>\r\n    <profile>\r\n      <id>integration-tests</id>\r\n      <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <configuration>\r\n                    <skip>true</skip>\r\n                </configuration>\r\n                <executions>\r\n                    <execution>\r\n                        <id>surefire-it</id>\r\n                        <phase>integration-test</phase>\r\n                        <goals>\r\n                            <goal>test</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <skip>true</skip>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n          <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-failsafe-plugin</artifactId>\r\n            <version>2.18.1</version>\r\n            <executions>\r\n              <execution>\r\n                <goals>\r\n                  <goal>integration-test</goal>\r\n                  <goal>verify</goal>\r\n                </goals>\r\n              </execution>\r\n            </executions>\r\n          </plugin>\r\n        </plugins>\r\n      </build>\r\n    </profile>\r\n  </profiles>\r\n```\r\n\r\nTo execute unit tests I can simply type: \r\n\r\n```\r\nmvn clean test\r\n```\r\n\r\nOr \r\n\r\n```\r\nmvn clean install\r\n```\r\n\r\nTo execute integration tests I can simply type: \r\n\r\n```\r\nmvn clean verify -Pintegration-tests\r\n```\r\n\r\n### Defining the Spring boot dependencies for Spring MVC and Spring Test\r\n\r\nThe dependency section to have a fully flagged Spring MVC application setup is easy (Junit is not necessary for Spring boot but required for JUnit unit and integration testing):\r\n\r\n```\r\n<dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.12</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.springframework.boot</groupId>\r\n      <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.springframework.boot</groupId>\r\n      <artifactId>spring-boot-starter-test</artifactId>\r\n      <scope>test</scope>\r\n    </dependency>\r\n  </dependencies>\r\n```\r\n\r\n## The controller\r\n\r\nThe controller is a basic Java class with a main method. The main method is not necessary for it to work but it's useful for running the Spring MVC application as a jar file (e.g. java -jar <appname>). In Spring terms, this is a fully flagged Spring MVC controller. Thanks to the @RestController and @EnableAutoConfiguration annotations, Spring boot will do all the plumbing for us.\r\n\r\n```\r\npackage uk.co.jemos.experiments.spring.boot;\r\n\r\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * Created by tedonema on 09/05/2015.\r\n */\r\n@RestController\r\n@EnableAutoConfiguration\r\npublic class Example {\r\n\r\n    @RequestMapping(\"/\")\r\n    String home() {\r\n        return \"Hello World\";\r\n    }\r\n\r\n    /* --Uncomment this method to run this as a standalone jar file from the command line\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Example.class, args);\r\n    }\r\n    */\r\n}\r\n```\r\n\r\n## The unit test\r\n\r\n```\r\npackage uk.co.jemos.experiments.spring.boot.test.unit;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.boot.test.SpringApplicationConfiguration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.mock.web.MockServletContext;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport uk.co.jemos.experiments.spring.boot.Example;\r\n\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n/**\r\n * Created by tedonema on 09/05/2015.\r\n */\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = MockServletContext.class)\r\n@WebAppConfiguration\r\npublic class ExampleUnitTest {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(ExampleUnitTest.class);\r\n\r\n    private MockMvc mvc;\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        mvc = MockMvcBuilders.standaloneSetup(new Example()).build();\r\n    }\r\n\r\n    @Test\r\n    public void testExample() throws Exception {\r\n        LOG.info(\"Starting\");\r\n        mvc.perform(MockMvcRequestBuilders.get(\"/\").accept(MediaType.ALL))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().string(equalTo(\"Hello World\")));\r\n        LOG.info(\"Ending\");\r\n    }\r\n}\r\n```\r\n\r\nRunning the unit test gives the following output:\r\n\r\n```\r\n/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/bin/java -ea -Didea.launcher.port=7537 \"-Didea.launcher.bin.path=/Applications/IntelliJ IDEA 14.app/Contents/bin\" -Dfile.encoding=UTF-8 -classpath \"/Applications/IntelliJ IDEA 14.app/Contents/lib/idea_rt.jar:/Applications/IntelliJ IDEA 14.app/Contents/plugins/junit/lib/junit-rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/tools.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Users/tedonema/dev/spring-boot-web/target/test-classes:/Users/tedonema/dev/spring-boot-web/target/classes:/Users/tedonema/workspaces/mvn-repo/junit/junit/4.12/junit-4.12.jar:/Users/tedonema/workspaces/mvn-repo/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-web/1.2.3.RELEASE/spring-boot-starter-web-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter/1.2.3.RELEASE/spring-boot-starter-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot/1.2.3.RELEASE/spring-boot-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-autoconfigure/1.2.3.RELEASE/spring-boot-autoconfigure-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-logging/1.2.3.RELEASE/spring-boot-starter-logging-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/jcl-over-slf4j/1.7.11/jcl-over-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/slf4j-api/1.7.11/slf4j-api-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/jul-to-slf4j/1.7.11/jul-to-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/log4j-over-slf4j/1.7.11/log4j-over-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar:/Users/tedonema/workspaces/mvn-repo/ch/qos/logback/logback-core/1.1.3/logback-core-1.1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/yaml/snakeyaml/1.14/snakeyaml-1.14.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-tomcat/1.2.3.RELEASE/spring-boot-starter-tomcat-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-core/8.0.20/tomcat-embed-core-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-el/8.0.20/tomcat-embed-el-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-logging-juli/8.0.20/tomcat-embed-logging-juli-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-websocket/8.0.20/tomcat-embed-websocket-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-databind/2.4.5/jackson-databind-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-annotations/2.4.5/jackson-annotations-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-core/2.4.5/jackson-core-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/org/hibernate/hibernate-validator/5.1.3.Final/hibernate-validator-5.1.3.Final.jar:/Users/tedonema/workspaces/mvn-repo/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/Users/tedonema/workspaces/mvn-repo/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-web/4.1.6.RELEASE/spring-web-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-aop/4.1.6.RELEASE/spring-aop-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-beans/4.1.6.RELEASE/spring-beans-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-context/4.1.6.RELEASE/spring-context-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-webmvc/4.1.6.RELEASE/spring-webmvc-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-expression/4.1.6.RELEASE/spring-expression-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-test/1.2.3.RELEASE/spring-boot-starter-test-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/mockito/mockito-core/1.10.19/mockito-core-1.10.19.jar:/Users/tedonema/workspaces/mvn-repo/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/tedonema/workspaces/mvn-repo/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-test/4.1.6.RELEASE/spring-test-4.1.6.RELEASE.jar\" com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 uk.co.jemos.experiments.spring.boot.test.unit.ExampleUnitTest\r\n2015-05-09 15:14:18.220  INFO 35829 --- [           main] u.c.j.e.s.b.test.unit.ExampleUnitTest    : Starting\r\n\r\n  .   ____          _            __ _ _\r\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\r\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\r\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\r\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\r\n =========|_|==============|___/=/_/_/_/\r\n :: Spring Boot ::        (v1.2.3.RELEASE)\r\n\r\n2015-05-09 15:14:17.546  INFO 35829 --- [           main] c.i.rt.execution.junit.JUnitStarter      : Starting JUnitStarter on marcos-imac-3.local with PID 35829 (started by tedonema in /Users/tedonema/dev/spring-boot-web)\r\n2015-05-09 15:14:17.655  INFO 35829 --- [           main] c.i.rt.execution.junit.JUnitStarter      : Started JUnitStarter in 0.373 seconds (JVM running for 1.263)\r\n2015-05-09 15:14:18.271  INFO 35829 --- [           main] u.c.j.e.s.b.test.unit.ExampleUnitTest    : Ending\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\n## The integration test\r\n\r\nThe integration test is a bit more involved, as we would expect, because here we're actually sending an http request to our controller and analysing the response. \r\n\r\nThe  \r\n\r\n```\r\n@IntegrationTest(\"{server.port=0}\")\r\n```\r\n\r\nannotation will instruct Spring to run the controller in the first available port and the following annotation:\r\n\r\n```\r\n@Value(\"${local.server.port}\")\r\nprivate int port;\r\n```\r\n\r\nSets the port attribute with the value of the port found by the @IntegrationTest annotation.\r\n\r\n```\r\npackage uk.co.jemos.experiments.spring.boot.test.integration;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.test.IntegrationTest;\r\nimport org.springframework.boot.test.SpringApplicationConfiguration;\r\nimport org.springframework.boot.test.TestRestTemplate;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport uk.co.jemos.experiments.spring.boot.Example;\r\n\r\nimport java.net.URL;\r\n\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.junit.Assert.assertThat;\r\n\r\n/**\r\n * Created by tedonema on 09/05/2015.\r\n */\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Example.class)\r\n@WebAppConfiguration\r\n@IntegrationTest(\"{server.port=0}\")\r\npublic class ExampleIT {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(ExampleIT.class);\r\n\r\n    @Value(\"${local.server.port}\")\r\n    private int port;\r\n\r\n    private URL base;\r\n    private RestTemplate template;\r\n\r\n    private MockMvc mvc;\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        this.base = new URL(\"http://localhost:\" + port + \"/\");\r\n        template = new TestRestTemplate();\r\n    }\r\n\r\n    @Test\r\n    public void testExample() throws Exception {\r\n        LOG.info(\"Starting\");\r\n        ResponseEntity<String> response = template.getForEntity(base.toString(), String.class);\r\n        assertThat(response.getBody(), equalTo(\"Hello World\"));\r\n        LOG.info(\"Ending\");\r\n    }\r\n}\r\n```\r\n\r\nRunning the integration test gives the following output:\r\n\r\n```\r\n/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/bin/java -ea -Didea.launcher.port=7536 \"-Didea.launcher.bin.path=/Applications/IntelliJ IDEA 14.app/Contents/bin\" -Dfile.encoding=UTF-8 -classpath \"/Applications/IntelliJ IDEA 14.app/Contents/lib/idea_rt.jar:/Applications/IntelliJ IDEA 14.app/Contents/plugins/junit/lib/junit-rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/lib/tools.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Users/tedonema/dev/spring-boot-web/target/test-classes:/Users/tedonema/dev/spring-boot-web/target/classes:/Users/tedonema/workspaces/mvn-repo/junit/junit/4.12/junit-4.12.jar:/Users/tedonema/workspaces/mvn-repo/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-web/1.2.3.RELEASE/spring-boot-starter-web-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter/1.2.3.RELEASE/spring-boot-starter-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot/1.2.3.RELEASE/spring-boot-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-autoconfigure/1.2.3.RELEASE/spring-boot-autoconfigure-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-logging/1.2.3.RELEASE/spring-boot-starter-logging-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/jcl-over-slf4j/1.7.11/jcl-over-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/slf4j-api/1.7.11/slf4j-api-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/jul-to-slf4j/1.7.11/jul-to-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/org/slf4j/log4j-over-slf4j/1.7.11/log4j-over-slf4j-1.7.11.jar:/Users/tedonema/workspaces/mvn-repo/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar:/Users/tedonema/workspaces/mvn-repo/ch/qos/logback/logback-core/1.1.3/logback-core-1.1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/yaml/snakeyaml/1.14/snakeyaml-1.14.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-tomcat/1.2.3.RELEASE/spring-boot-starter-tomcat-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-core/8.0.20/tomcat-embed-core-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-el/8.0.20/tomcat-embed-el-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-logging-juli/8.0.20/tomcat-embed-logging-juli-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/org/apache/tomcat/embed/tomcat-embed-websocket/8.0.20/tomcat-embed-websocket-8.0.20.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-databind/2.4.5/jackson-databind-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-annotations/2.4.5/jackson-annotations-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/jackson/core/jackson-core/2.4.5/jackson-core-2.4.5.jar:/Users/tedonema/workspaces/mvn-repo/org/hibernate/hibernate-validator/5.1.3.Final/hibernate-validator-5.1.3.Final.jar:/Users/tedonema/workspaces/mvn-repo/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/Users/tedonema/workspaces/mvn-repo/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/Users/tedonema/workspaces/mvn-repo/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-web/4.1.6.RELEASE/spring-web-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-aop/4.1.6.RELEASE/spring-aop-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-beans/4.1.6.RELEASE/spring-beans-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-context/4.1.6.RELEASE/spring-context-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-webmvc/4.1.6.RELEASE/spring-webmvc-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-expression/4.1.6.RELEASE/spring-expression-4.1.6.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/boot/spring-boot-starter-test/1.2.3.RELEASE/spring-boot-starter-test-1.2.3.RELEASE.jar:/Users/tedonema/workspaces/mvn-repo/org/mockito/mockito-core/1.10.19/mockito-core-1.10.19.jar:/Users/tedonema/workspaces/mvn-repo/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/Users/tedonema/workspaces/mvn-repo/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/Users/tedonema/workspaces/mvn-repo/org/springframework/spring-test/4.1.6.RELEASE/spring-test-4.1.6.RELEASE.jar\" com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 uk.co.jemos.experiments.spring.boot.test.integration.ExampleIT\r\n\r\n  .   ____          _            __ _ _\r\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\r\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\r\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\r\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\r\n =========|_|==============|___/=/_/_/_/\r\n :: Spring Boot ::        (v1.2.3.RELEASE)\r\n\r\n2015-05-09 15:18:53.467  INFO 35939 --- [           main] c.i.rt.execution.junit.JUnitStarter      : Starting JUnitStarter on marcos-imac-3.local with PID 35939 (started by tedonema in /Users/tedonema/dev/spring-boot-web)\r\n2015-05-09 15:18:55.118  INFO 35939 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat\r\n2015-05-09 15:18:55.119  INFO 35939 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.20\r\n2015-05-09 15:18:55.264  INFO 35939 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\r\n2015-05-09 15:18:56.196  INFO 35939 --- [           main] c.i.rt.execution.junit.JUnitStarter      : Started JUnitStarter in 2.989 seconds (JVM running for 3.835)\r\n2015-05-09 15:18:56.212  INFO 35939 --- [           main] u.c.j.e.s.b.test.integration.ExampleIT   : Starting\r\n2015-05-09 15:18:56.306  INFO 35939 --- [nio-8181-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'\r\n2015-05-09 15:18:56.365  INFO 35939 --- [           main] u.c.j.e.s.b.test.integration.ExampleIT   : Ending\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\n## The future\r\n\r\nThe implications that Spring boot brings to the table are immense. Some examples that are coming to my mind: \r\n\r\n* Running micro-services without the need of fully flagged containers. Since a Spring boot application can run as a jar, we could deploy micro-applications to highly available servers with enormous advantages for performance and horizontal scalability. \r\n\r\n* Testing our applications inside out before deploying them to an integration or a production environment because easy and allows us to concentrate on the test rather than on the boilerplate code. The examples above showed that we can perform a unit test on a controller (similarly to what one would have done before) but also that we can execute integration tests running on a fully-flagged servlet container (embedded with Spring boot) as a normal unit test. These tests can verify how the controller will actually behave once deployed in production. It becomes easy to test POST requests, JSON interactions, etc. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}